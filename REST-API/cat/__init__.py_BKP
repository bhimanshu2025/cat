from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_swagger_ui import get_swaggerui_blueprint
import logging
from flask_login import LoginManager
from flask_bcrypt import Bcrypt
from flask_apscheduler import APScheduler
from flask_mail import Mail

app = Flask(__name__)

root = logging.getLogger()
app.logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s:[%(levelname)s]:[%(name)s] : [%(threadName)s] : %(message)s")
file_handler = logging.FileHandler('cat.log')
file_handler.setFormatter(formatter)
root.addHandler(file_handler)

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
root.addHandler(stream_handler)

SWAGGER_URL = '/swagger'  # URL for exposing Swagger UI (without trailing '/')
API_URL = '/static/swagger.json'  # Our API url (can of course be a local resource)

# Call factory function to create our blueprint
swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,  # Swagger UI static files will be mapped to '{SWAGGER_URL}/dist/'
    API_URL,
    config={  # Swagger UI config overrides
        'app_name': "CAT"
    },
    # oauth_config={  # OAuth config. See https://github.com/swagger-api/swagger-ui#oauth2-configuration .
    #    'clientId': "your-client-id",
    #    'clientSecret': "your-client-secret-if-required",
    #    'realm': "your-realms",
    #    'appName': "your-app-name",
    #    'scopeSeparator': " ",
    #    'additionalQueryStringParams': {'test': "hello"}
    # }
)

app.register_blueprint(swaggerui_blueprint)

app.config['SECRET_KEY'] = 'ee9d062f9ee600575c1876cd2854bfbc'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cat.db'
# app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:Jnpr123!@10.85.216.114:3306/cat'
db = SQLAlchemy(app)
db2 = SQLAlchemy(app)
bcrypt = Bcrypt(app)
scheduler = APScheduler()
scheduler_sf = APScheduler()
login_manager = LoginManager()
login_manager.login_view = 'users.login'
login_manager.login_message_category = 'info'
mail = Mail()
from cat.api.cases.routes import cases
from cat.api.users.routes import users
from cat.api.teams.routes import teams
from cat.api.audit.routes import auditing
from cat.api.products.routes import products
from cat.api.userproduct.routes import ups

app.register_blueprint(cases)
app.register_blueprint(users)
app.register_blueprint(teams)
app.register_blueprint(auditing)
app.register_blueprint(products)
app.register_blueprint(ups)

migrate=Migrate(app, db, render_as_batch=True) #Initializing migrate.

